using UnityEngine;
using Core.Interfaces;
using System.Collections;

namespace Core.Data.ScriptableObjects
{
    // –≠—Ñ—Ñ–µ–∫—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ (–ß–∞–π)
    [CreateAssetMenu(fileName = "SpeedEffect", menuName = "Game Data/Effects/Speed Effect")]
    public class SpeedEffect : EffectBase
    {
        [Header("Speed Settings")]
        [SerializeField] private float _speedMultiplier = 2f;
        [SerializeField] private float _defaultDuration = 5f;
        
        public override bool AutoExpire => true;
        
        public override void OnApply(GameObject target)
        {
            var player = target.GetComponent<Player>();
            if (player != null && player.Movement != null)
            {
                player.Movement.SetSpeedMultiplier(_speedMultiplier);
                
                if (Config == null)
                {
                    player.StartCoroutine(ForceExpire(target, _defaultDuration));
                }
            }
        }
        
        public override void OnRemove(GameObject target)
        {
            var player = target.GetComponent<Player>();
            if (player != null && player.Movement != null)
            {
                player.Movement.SetSpeedMultiplier(1f);
            }
        }
        
        private IEnumerator ForceExpire(GameObject target, float duration)
        {
            yield return new WaitForSeconds(duration);
            RemoveEffect(target);
        }
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–º–µ–¥–ª–µ–Ω–∏—è (–õ–µ–¥)
    [CreateAssetMenu(fileName = "SlowEffect", menuName = "Game Data/Effects/Slow Effect")]
    public class SlowEffect : EffectBase
    {
        [Header("Slow Settings")]
        [SerializeField] private float _slowMultiplier = 0.5f;
        [SerializeField] private float _defaultDuration = 3f;
        
        public override bool AutoExpire => true;
        
        public override void OnApply(GameObject target)
        {
            var player = target.GetComponent<Player>();
            if (player != null && player.Movement != null)
            {
                player.Movement.SetSpeedMultiplier(_slowMultiplier);
                
                if (Config == null)
                {
                    player.StartCoroutine(ForceExpire(target, _defaultDuration));
                }
            }
        }
        
        public override void OnRemove(GameObject target)
        {
            var player = target.GetComponent<Player>();
            if (player != null && player.Movement != null)
            {
                player.Movement.SetSpeedMultiplier(1f);
            }
        }
        
        private IEnumerator ForceExpire(GameObject target, float duration)
        {
            yield return new WaitForSeconds(duration);
            RemoveEffect(target);
        }
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç —è–¥–∞ (–æ—Ç –®–µ—Ä—à–Ω—è)
    [CreateAssetMenu(fileName = "PoisonEffect", menuName = "Game Data/Effects/Poison Effect")]
    public class PoisonEffect : EffectBase
    {
        [Header("Poison Settings")]
        [SerializeField] private int _damagePerTick = 1;
        [SerializeField] private float _tickInterval = 1f;
        [SerializeField] private float _defaultDuration = 5f;
        
        private Coroutine _poisonCoroutine;
        
        public override bool AutoExpire => true;
        
        public override void OnApply(GameObject target)
        {
            var player = target.GetComponent<Player>();
            if (player != null)
            {
                _poisonCoroutine = player.StartCoroutine(PoisonTick(target));
                
                if (Config == null)
                {
                    player.StartCoroutine(ForceExpire(target, _defaultDuration));
                }
            }
        }
        
        public override void OnRemove(GameObject target)
        {
            var player = target.GetComponent<Player>();
            if (_poisonCoroutine != null && player != null)
            {
                player.StopCoroutine(_poisonCoroutine);
            }
        }
        
        private IEnumerator PoisonTick(GameObject target)
        {
            var runner = target.GetComponent<EffectRunner>();
            while (runner != null && runner.HasEffect<PoisonEffect>())
            {
                yield return new WaitForSeconds(_tickInterval);
                var hittable = target.GetComponent<IHittable>();
                hittable?.TakeDamage(_damagePerTick);
            }
        }
        
        private IEnumerator ForceExpire(GameObject target, float duration)
        {
            yield return new WaitForSeconds(duration);
            RemoveEffect(target);
        }
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç —Å—Ç–∞–Ω–∞ (–æ—Ç –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—É–∫–∞)
    [CreateAssetMenu(fileName = "StunEffect", menuName = "Game Data/Effects/Stun Effect")]
    public class StunEffect : EffectBase
    {
        [SerializeField] private float _defaultDuration = 2f;
        
        public override bool AutoExpire => true;
        
        public override void OnApply(GameObject target)
        {
            var player = target.GetComponent<Player>();
            if (player != null && player.Movement != null)
            {
                player.Movement.SetStunned(true);
                
                if (Config == null)
                {
                    player.StartCoroutine(ForceExpire(target, _defaultDuration));
                }
            }
        }
        
        public override void OnRemove(GameObject target)
        {
            var player = target.GetComponent<Player>();
            if (player != null && player.Movement != null)
            {
                player.Movement.SetStunned(false);
            }
        }
        
        private IEnumerator ForceExpire(GameObject target, float duration)
        {
            yield return new WaitForSeconds(duration);
            RemoveEffect(target);
        }
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç —â–∏—Ç–∞ (–î—Ä–∞–∫–æ–Ω–∏–π —Ñ—Ä—É–∫—Ç)
    [CreateAssetMenu(fileName = "ShieldEffect", menuName = "Game Data/Effects/Shield Effect")]
    public class ShieldEffect : EffectBase
    {
        [Header("Shield Settings")]
        [SerializeField] private int _shieldAmount = 1;
        [SerializeField] private float _defaultDuration = 10f;
        
        public override bool AutoExpire => true;
        
        public override void OnApply(GameObject target)
        {
            Debug.Log($"üõ°Ô∏è –©–∏—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –Ω–∞ {target.name}");
            
            if (Config == null)
            {
                var player = target.GetComponent<Player>();
                if (player != null)
                {
                    player.StartCoroutine(ForceExpire(target, _defaultDuration));
                }
            }
        }
        
        public override void OnRemove(GameObject target)
        {
            Debug.Log($"üõ°Ô∏è –©–∏—Ç —Å–Ω—è—Ç —Å {target.name}");
        }
        
        private IEnumerator ForceExpire(GameObject target, float duration)
        {
            yield return new WaitForSeconds(duration);
            RemoveEffect(target);
        }
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç –ª–æ–≤—É—à–µ–∫ (–ü–µ–ª—å–º–µ–Ω–∏)
    [CreateAssetMenu(fileName = "TrapEffect", menuName = "Game Data/Effects/Trap Effect")]
    public class TrapEffect : EffectBase
    {
        [Header("Trap Settings")]
        [SerializeField] private float _slowMultiplier = 0.3f;
        [SerializeField] private float _defaultDuration = 4f;
        
        public override bool AutoExpire => true;
        
        public override void OnApply(GameObject target)
        {
            // –ó–∞–º–µ–¥–ª—è–µ–º –≤—Ä–∞–≥–∞
            var enemy = target.GetComponent<BasicEnemyMovementLogic>();
            if (enemy != null)
            {
                // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ SetSpeedMultiplier –≤ BasicEnemyMovementLogic
                Debug.Log($"üï∏Ô∏è –í—Ä–∞–≥ {target.name} –ø–æ–ø–∞–ª –≤ –ª–æ–≤—É—à–∫—É!");
            }
            
            if (Config == null)
            {
                var player = GameObject.FindObjectOfType<Player>();
                if (player != null)
                {
                    player.StartCoroutine(ForceExpire(target, _defaultDuration));
                }
            }
        }
        
        public override void OnRemove(GameObject target)
        {
            Debug.Log($"üï∏Ô∏è –í—Ä–∞–≥ {target.name} –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è –æ—Ç –ª–æ–≤—É—à–∫–∏!");
        }
        
        private IEnumerator ForceExpire(GameObject target, float duration)
        {
            yield return new WaitForSeconds(duration);
            RemoveEffect(target);
        }
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç –∂–∏—Ä–Ω–æ—Å—Ç–∏ (–ö–æ—Ä–µ–π—Å–∫–∞—è –º–æ—Ä–∫–æ–≤–∫–∞)
    [CreateAssetMenu(fileName = "FatEffect", menuName = "Game Data/Effects/Fat Effect")]
    public class FatEffect : EffectBase
    {
        [Header("Fat Settings")]
        [SerializeField] private float _damageReduction = 0.5f;
        [SerializeField] private float _defaultDuration = 8f;
        
        public override bool AutoExpire => true;
        
        public override void OnApply(GameObject target)
        {
            Debug.Log($"üçñ –ñ–∏—Ä–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –Ω–∞ {target.name} - —Å–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –Ω–∞ {(1-_damageReduction)*100}%");
            
            if (Config == null)
            {
                var player = target.GetComponent<Player>();
                if (player != null)
                {
                    player.StartCoroutine(ForceExpire(target, _defaultDuration));
                }
            }
        }
        
        public override void OnRemove(GameObject target)
        {
            Debug.Log($"üçñ –ñ–∏—Ä–Ω–æ—Å—Ç—å —Å–Ω—è—Ç–∞ —Å {target.name}");
        }
        
        private IEnumerator ForceExpire(GameObject target, float duration)
        {
            yield return new WaitForSeconds(duration);
            RemoveEffect(target);
        }
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω—Ç–∞–∫–ª–µ–π (–†–∞—Ç–∞—Ç—É–π)
    [CreateAssetMenu(fileName = "TentacleEffect", menuName = "Game Data/Effects/Tentacle Effect")]
    public class TentacleEffect : EffectBase
    {
        [Header("Tentacle Settings")]
        [SerializeField] private int _tentacleCount = 3;
        [SerializeField] private float _tentacleRange = 2f;
        [SerializeField] private int _tentacleDamage = 1;
        [SerializeField] private float _attackInterval = 2f;
        [SerializeField] private float _defaultDuration = 10f;
        
        private Coroutine _tentacleCoroutine;
        
        public override bool AutoExpire => true;
        
        public override void OnApply(GameObject target)
        {
            var player = target.GetComponent<Player>();
            if (player != null)
            {
                _tentacleCoroutine = player.StartCoroutine(TentacleAttack(target));
                
                if (Config == null)
                {
                    player.StartCoroutine(ForceExpire(target, _defaultDuration));
                }
            }
        }
        
        public override void OnRemove(GameObject target)
        {
            var player = target.GetComponent<Player>();
            if (_tentacleCoroutine != null && player != null)
            {
                player.StopCoroutine(_tentacleCoroutine);
            }
        }
        
        private IEnumerator TentacleAttack(GameObject owner)
        {
            var runner = owner.GetComponent<EffectRunner>();
            while (runner != null && runner.HasEffect<TentacleEffect>())
            {
                yield return new WaitForSeconds(_attackInterval);
                
                // –ù–∞—Ö–æ–¥–∏–º –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ
                Collider2D[] enemies = Physics2D.OverlapCircleAll(owner.transform.position, _tentacleRange);
                int attacked = 0;
                
                foreach (var enemy in enemies)
                {
                    if (attacked >= _tentacleCount) break;
                    
                    var hittable = enemy.GetComponent<IHittable>();
                    if (hittable != null && enemy.gameObject != owner)
                    {
                        hittable.TakeDamage(_tentacleDamage);
                        attacked++;
                        Debug.Log($"üêô –¢–µ–Ω—Ç–∞–∫–ª—å –∞—Ç–∞–∫–æ–≤–∞–ª {enemy.name}!");
                    }
                }
            }
        }
        
        private IEnumerator ForceExpire(GameObject target, float duration)
        {
            yield return new WaitForSeconds(duration);
            RemoveEffect(target);
        }
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç –æ–∂–∏—Ä–µ–Ω–∏—è (–ë—É—Ä–≥–µ—Ä)
    [CreateAssetMenu(fileName = "FattenEffect", menuName = "Game Data/Effects/Fatten Effect")]
    public class FattenEffect : EffectBase
    {
        [Header("Fatten Settings")]
        [SerializeField] private float _sizeMultiplier = 1.5f;
        [SerializeField] private float _defaultDuration = 6f;
        
        private Vector3 _originalScale;
        
        public override bool AutoExpire => true;
        
        public override void OnApply(GameObject target)
        {
            _originalScale = target.transform.localScale;
            target.transform.localScale = _originalScale * _sizeMultiplier;
            Debug.Log($"üçî –í—Ä–∞–≥ {target.name} —Ä–∞—Å—Ç–æ–ª—Å—Ç–µ–ª!");
            
            if (Config == null)
            {
                var player = GameObject.FindObjectOfType<Player>();
                if (player != null)
                {
                    player.StartCoroutine(ForceExpire(target, _defaultDuration));
                }
            }
        }
        
        public override void OnRemove(GameObject target)
        {
            if (target != null)
            {
                target.transform.localScale = _originalScale;
                Debug.Log($"üçî –í—Ä–∞–≥ {target.name} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É!");
            }
        }
        
        private IEnumerator ForceExpire(GameObject target, float duration)
        {
            yield return new WaitForSeconds(duration);
            RemoveEffect(target);
        }
    }
    
    // –≠—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ (–í–∑—Ä—ã–≤–Ω–∞—è –∫–∞—Ä–∞–º–µ–ª—å)
    [CreateAssetMenu(fileName = "BombEffect", menuName = "Game Data/Effects/Bomb Effect")]
    public class BombEffect : EffectBase
    {
        [Header("Bomb Settings")]
        [SerializeField] private int _explosionDamage = 3;
        [SerializeField] private float _explosionRadius = 2f;
        [SerializeField] private float _fuseTime = 2f;
        
        public override bool AutoExpire => false; // –í–∑—Ä—ã–≤–∞–µ—Ç—Å—è —Å–∞–º
        
        public override void OnApply(GameObject target)
        {
            var player = GameObject.FindObjectOfType<Player>();
            if (player != null)
            {
                player.StartCoroutine(BombCountdown(target));
            }
        }
        
        public override void OnRemove(GameObject target)
        {
            // –≠—Ñ—Ñ–µ–∫—Ç —É–¥–∞–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞
        }
        
        private IEnumerator BombCountdown(GameObject target)
        {
            Debug.Log($"üí£ –ë–æ–º–±–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {target.name}! –í–∑—Ä—ã–≤ —á–µ—Ä–µ–∑ {_fuseTime} —Å–µ–∫!");
            
            yield return new WaitForSeconds(_fuseTime);
            
            if (target != null)
            {
                // –í–∑—Ä—ã–≤!
                Collider2D[] victims = Physics2D.OverlapCircleAll(target.transform.position, _explosionRadius);
                
                foreach (var victim in victims)
                {
                    var hittable = victim.GetComponent<IHittable>();
                    if (hittable != null)
                    {
                        hittable.TakeDamage(_explosionDamage);
                        Debug.Log($"üí• –í–∑—Ä—ã–≤ –ø–æ–≤—Ä–µ–¥–∏–ª {victim.name}!");
                    }
                }
                
                Debug.Log($"üí• –í–ó–†–´–í! –£—Ä–æ–Ω {_explosionDamage} –≤ —Ä–∞–¥–∏—É—Å–µ {_explosionRadius}");
                RemoveEffect(target);
            }
        }
    }
}
