using System.Collections;
using UnityEngine;
using Core.Interfaces;

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—É–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –í–ú–ï–°–¢–ï —Å EnemyAI
public class MechanicalSpiderBehavior : MonoBehaviour
{
    [Header("Spider Tail Attack")]
    [SerializeField] private Transform _tailAttackPoint;
    [SerializeField] private float _tailAttackRange = 2f;
    [SerializeField] private float _tailAttackCooldown = 1.5f;
    [SerializeField] private int _tailDamage = 2;
    [SerializeField] private EffectBase _stunEffect;
    [SerializeField] private float _attackWindupTime = 0.5f;
    
    private EnemyAI _enemyAI;
    private PlayerCheckSystem _playerCheck;
    private BasicEnemyMovementLogic _movement;
    private Coroutine _attackCoroutine;
    private bool _isAttacking = false;
    private Animator _animator;
    
    private void Awake()
    {
        _enemyAI = GetComponent<EnemyAI>();
        _playerCheck = GetComponent<PlayerCheckSystem>();
        _movement = GetComponent<BasicEnemyMovementLogic>();
        _animator = GetComponent<Animator>();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞–∫ –Ω–∞–∑–µ–º–Ω–æ–≥–æ –≤—Ä–∞–≥–∞
        if (_movement != null)
        {
            _movement.SetCanFly(false);
            _movement.SetMinDistanceToTarget(1.2f);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫—É –∞—Ç–∞–∫–∏ —Ö–≤–æ—Å—Ç–æ–º –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (_tailAttackPoint == null)
        {
            GameObject tailPoint = new GameObject("TailAttackPoint");
            tailPoint.transform.SetParent(transform);
            tailPoint.transform.localPosition = Vector3.back * 0.5f;
            _tailAttackPoint = tailPoint.transform;
        }
    }
    
    private void OnEnable()
    {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ü–û–°–õ–ï EnemyAI
        if (_playerCheck != null)
        {
            _playerCheck.PlayerEnteredRanged += OnPlayerInRange;
            _playerCheck.PlayerLeftRanged += OnPlayerLeftRange;
        }
    }
    
    private void OnDisable()
    {
        if (_playerCheck != null)
        {
            _playerCheck.PlayerEnteredRanged -= OnPlayerInRange;
            _playerCheck.PlayerLeftRanged -= OnPlayerLeftRange;
        }
        
        if (_attackCoroutine != null)
        {
            StopCoroutine(_attackCoroutine);
        }
    }
    
    private void OnPlayerInRange(Transform player)
    {
        // –ù–∞—á–∏–Ω–∞–µ–º –∞—Ç–∞–∫–∏ —Ö–≤–æ—Å—Ç–æ–º –∫–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –≤ –¥–∞–ª—å–Ω–µ–π –∑–æ–Ω–µ
        if (_attackCoroutine == null && !_isAttacking)
        {
            _attackCoroutine = StartCoroutine(TailAttackRoutine());
        }
    }
    
    private void OnPlayerLeftRange()
    {
        // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞—Ç–∞–∫–∏
        if (_attackCoroutine != null)
        {
            StopCoroutine(_attackCoroutine);
            _attackCoroutine = null;
        }
        _isAttacking = false;
    }
    
    private IEnumerator TailAttackRoutine()
    {
        while (_playerCheck != null && _playerCheck.IsInRanged)
        {
            yield return StartCoroutine(PerformTailAttack());
            yield return new WaitForSeconds(_tailAttackCooldown);
        }
        
        _attackCoroutine = null;
    }
    
    private IEnumerator PerformTailAttack()
    {
        _isAttacking = true;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –¥–ª—è –∞—Ç–∞–∫–∏
        if (_movement != null)
        {
            _movement.EnableMovement(false);
        }
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞—Ç–∞–∫–∏
        if (_animator != null)
        {
            _animator.SetTrigger("TailAttackWindup");
        }
        
        Debug.Log("üï∑Ô∏è –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—É–∫ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –∞—Ç–∞–∫–µ —Ö–≤–æ—Å—Ç–æ–º...");
        yield return new WaitForSeconds(_attackWindupTime);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
        PerformTailStrike();
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏
        if (_animator != null)
        {
            _animator.SetTrigger("TailAttackStrike");
        }
        
        yield return new WaitForSeconds(0.3f);
        
        // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        if (_movement != null)
        {
            _movement.EnableMovement(true);
        }
        
        _isAttacking = false;
    }
    
    private void PerformTailStrike()
    {
        if (_tailAttackPoint == null || _playerCheck == null || _playerCheck.CurrentTarget == null) return;
        
        Vector2 attackPosition = _tailAttackPoint.position;
        Vector2 playerPosition = _playerCheck.CurrentTarget.position;
        
        float distanceToPlayer = Vector2.Distance(attackPosition, playerPosition);
        
        if (distanceToPlayer <= _tailAttackRange)
        {
            var hittable = _playerCheck.CurrentTarget.GetComponent<IHittable>();
            if (hittable != null)
            {
                hittable.TakeDamage(_tailDamage);
                
                if (_stunEffect != null)
                {
                    _stunEffect.ApplyEffect(_playerCheck.CurrentTarget.gameObject);
                }
                
                Debug.Log("üï∑Ô∏è‚ö° –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—É–∫ —É–¥–∞—Ä–∏–ª —Ö–≤–æ—Å—Ç–æ–º! –ò–≥—Ä–æ–∫ –æ–≥–ª—É—à–µ–Ω!");
                StartCoroutine(TailStrikeEffect());
            }
        }
        else
        {
            Debug.Log("üï∑Ô∏è –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–∞—É–∫ –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è!");
        }
    }
    
    private IEnumerator TailStrikeEffect()
    {
        var spriteRenderer = GetComponent<SpriteRenderer>();
        if (spriteRenderer != null)
        {
            Color originalColor = spriteRenderer.color;
            spriteRenderer.color = Color.cyan;
            yield return new WaitForSeconds(0.1f);
            spriteRenderer.color = originalColor;
        }
    }
    
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    private void OnDrawGizmosSelected()
    {
        if (_tailAttackPoint != null)
        {
            Gizmos.color = Color.cyan;
            Gizmos.DrawWireSphere(_tailAttackPoint.position, _tailAttackRange);
            
            Gizmos.color = Color.blue;
            Gizmos.DrawLine(transform.position, _tailAttackPoint.position);
        }
        
        if (_playerCheck != null && _playerCheck.CurrentTarget != null)
        {
            Gizmos.color = _isAttacking ? Color.red : Color.yellow;
            Gizmos.DrawLine(transform.position, _playerCheck.CurrentTarget.position);
        }
    }
}
